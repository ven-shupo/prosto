{"version":3,"sources":["img/richard.jpg","Advanced.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","db","name","url","richard","rate","Advanced","_useState","useState","length","_useState2","Object","slicedToArray","currentIndex","setCurrentIndex","_useState3","_useState4","lastDirection","setLastDirection","currentIndexRef","useRef","childRefs","useMemo","Array","fill","map","i","React","createRef","swiped","direction","nameToDelete","index","val","current","react_default","a","createElement","href","rel","className","character","react_tinder_card_default","ref","key","onSwipe","dir","onCardLeftScreen","idx","console","log","concat","restoreCard","style","backgroundImage","App","window","Telegram","src_Advanced","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCGlCC,EAAK,CACT,CACEC,KAAM,oBACNC,IAAKC,IACLC,KAAM,GAER,CACEH,KAAM,iBACNC,IAAKC,IACLC,KAAM,GAER,CACEH,KAAM,cACNC,IAAKC,IACLC,KAAM,GAER,CACEH,KAAM,aACNC,IAAKC,IACLC,KAAM,GAER,CACEH,KAAM,iBACNC,IAAKC,IACLC,KAAM,IAiFKC,MA7Ef,WACE,IAAAC,EAAwCC,mBAASP,EAAGQ,OAAS,GAAEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAxDM,EAAYH,EAAA,GAAEI,EAAeJ,EAAA,GACpCK,EAA0CP,qBAAUQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA7CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEhCG,EAAkBC,iBAAOP,GAEzBQ,EAAYC,kBAChB,kBACEC,MAAMtB,EAAGQ,QACNe,KAAK,GACLC,IAAI,SAACC,GAAC,OAAKC,IAAMC,eACtB,IASIC,EAAS,SAACC,EAAWC,EAAcC,GANd,IAACC,EAO1Bf,EAAiBY,GANjBhB,EAD0BmB,EAQPD,EAAQ,GAN3Bb,EAAgBe,QAAUD,GAkB5B,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACEC,KAAK,8DACLC,IAAI,eAENJ,EAAAC,EAAAC,cAAA,QACEC,KAAK,8DACLC,IAAI,eAENJ,EAAAC,EAAAC,cAAA,UAAI,qBACJF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZvC,EAAGwB,IAAI,SAACgB,EAAWT,GAAK,OACvBG,EAAAC,EAAAC,cAACK,EAAAN,EAAU,CACTO,IAAKtB,EAAUW,GACfQ,UAAU,QACVI,IAAKH,EAAUvC,KACf2C,QAAS,SAACC,GAAG,OAAKjB,EAAOiB,EAAKL,EAAUvC,KAAM8B,IAC9Ce,iBAAkB,kBA3BR7C,EA2ByBuC,EAAUvC,KA3B7B8C,EA2BmChB,EA1B3DiB,QAAQC,IAAG,GAAAC,OAAIjD,EAAI,MAAAiD,OAAKH,EAAG,sBAAsB7B,EAAgBe,cAEjEf,EAAgBe,SAAWc,GAAO3B,EAAU2B,GAAKd,QAAQkB,eAHxC,IAAClD,EAAM8C,IA6BhBb,EAAAC,EAAAC,cAAA,OACEgB,MAAO,CAAEC,gBAAe,OAAAH,OAAQV,EAAUtC,IAAG,MAC7CqC,UAAU,QAEVL,EAAAC,EAAAC,cAAA,UAAKI,EAAUvC,MACfiC,EAAAC,EAAAC,cAAA,YAAOI,EAAUpC,KAAK,eAK7BY,EACCkB,EAAAC,EAAAC,cAAA,MAAIO,IAAK3B,EAAeuB,UAAU,YAAW,cAC/BvB,GAGdkB,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YAAW,WCpFlBe,MATf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAM,QACfgB,OAAOC,SACbtB,EAAAC,EAAAC,cAACqB,EAAQ,QCCOC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAG,MAAKC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d87ff27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/richard.fce3966e.jpg\";","import React, { useState, useMemo, useRef } from 'react'\nimport TinderCard from 'react-tinder-card'\nimport richard from './img/richard.jpg'\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    url: richard,\n    rate: 5,\n  },\n  {\n    name: 'Erlich Bachman',\n    url: richard,\n    rate: 5,\n  },\n  {\n    name: 'Monica Hall',\n    url: richard,\n    rate: 5,\n  },\n  {\n    name: 'Jared Dunn',\n    url: richard,\n    rate: 5,\n  },\n  {\n    name: 'Dinesh Chugtai',\n    url: richard,\n    rate: 5,\n  }\n]\n\nfunction Advanced () {\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n  const [lastDirection, setLastDirection] = useState()\n  // used for outOfFrame closure\n  const currentIndexRef = useRef(currentIndex)\n\n  const childRefs = useMemo(\n    () =>\n      Array(db.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    []\n  )\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val)\n    currentIndexRef.current = val\n  }\n\n  // set last direction and decrease current index\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction)\n    updateCurrentIndex(index - 1)\n  }\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  }\n\n  return (\n    <div>\n      <link\n        href='https://fonts.googleapis.com/css?family=Damion&display=swap'\n        rel='stylesheet'\n      />\n      <link\n        href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n        rel='stylesheet'\n      />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {db.map((character, index) => (\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={character.name}\n            onSwipe={(dir) => swiped(dir, character.name, index)}\n            onCardLeftScreen={() => outOfFrame(character.name, index)}\n          >\n            <div\n              style={{ backgroundImage:`url(${character.url})` }}\n              className='card'\n            >\n              <h3>{character.name}</h3>\n              <rate>{character.rate}‚≠ê</rate>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n      {lastDirection ? (\n        <h2 key={lastDirection} className='infoText'>\n          You swiped {lastDirection}\n        </h2>\n      ) : (\n        <h2 className='infoText'>\n          Swipe\n        </h2>\n      )}\n    </div>\n  )\n}\n\nexport default Advanced\n","import './App.css'\nimport React from 'react';\nimport Advanced from './Advanced'\n\n// const tg = window.Telegram.WebApp;\n\n\nfunction App () {\n  return (\n    <div className='app'>\n    data={window.Telegram}\n    <Advanced />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}